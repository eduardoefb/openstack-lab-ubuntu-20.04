---
# tasks file


  - include_vars: "{{ playbook_dir }}/config.yml"
  - include_vars: "{{ playbook_dir }}/passwords.yml"
  - include_vars: "main.yml"

  - name: Remove old packages
    apt:
      name: "{{ packages }}"
      state: absent
    vars:
      packages:        
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc

  - name: Install the required packages
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:        
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent 
        - software-properties-common

  - name: Add Dockerâ€™s official GPG key and add repository
    shell: |
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"      
    args:
      warn: no 
      executable: /bin/bash  

  - name: Install docker engine
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io



  - name: Installing the packages requred for zun and kuryr
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:        
        - git
        - python3-pip
        - numactl   
  

  - name: Create kuryr user and necessary directories
    shell: |
      userdel -r kuryr 2>/dev/null 
      groupdel kuryr 2>/dev/null
      groupadd --system kuryr
      useradd --home-dir "/var/lib/kuryr" --create-home --system --shell /bin/false -g kuryr kuryr
      mkdir -p /etc/kuryr
      chown kuryr:kuryr /etc/kuryr
    args:
      executable: /bin/bash 
      warn: no

  - name: Clone and install kuryr-libnetwork
    shell: |
      cd /var/lib/kuryr
      git clone -b master https://opendev.org/openstack/kuryr-libnetwork.git
      chown -R kuryr:kuryr kuryr-libnetwork
      cd kuryr-libnetwork
      pip3 install -r requirements.txt
      python3 setup.py install

    args:
      warn: no
      executable: /bin/bash

  - name: Remove file (delete file)
    file:
      path: /etc/kuryr/kuryr.conf
      state: absent

  - name: Generate a sample configuration file
    shell: |
      cd /var/lib/kuryr/kuryr-libnetwork
      su -s /bin/sh -c "./tools/generate_config_file_samples.sh" kuryr
      su -s /bin/sh -c "cp etc/kuryr.conf.sample /etc/kuryr/kuryr.conf" kuryr
    args:
      warn: no      

  - name: Edit /etc/kuryr/kuryr.conf
    template:
      src: kuryr.conf.j2
      dest: /etc/kuryr/kuryr.conf
      owner: root 
      group: kuryr
      mode: '0640'   
      
  - name: Create an upstart config, it could be named as /etc/systemd/system/kuryr-libnetwork.service
    template:
      src: kuryr-libnetwork.service.j2
      dest: /etc/systemd/system/kuryr-libnetwork.service
      owner: root 
      group: root
      mode: '0755'        

  - name: Enable and start the kuryr-libnetwork service
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
      daemon_reload: yes
    with_items:
      - kuryr-libnetwork
      - docker

  - name: Install and configure zun components
    shell: |
      groupadd --system zun
      useradd --home-dir "/var/lib/zun" --create-home --system --shell /bin/false -g zun zun
      rm -rfv /etc/zun 2>/dev/null
      rm -rfv /var/lib/zum/zum 2>/dev/null
      mkdir -p /etc/zun
      chown zun:zun /etc/zun
      mkdir -p /etc/cni/net.d
      chown zun:zun /etc/cni/net.d
      
    args:
      warn: no
      executable: /bin/bash
    
  - name: Clone zun
    shell: |
      cd /var/lib/zun
      git clone https://opendev.org/openstack/zun.git
      chown -R zun:zun zun
      cd zun
      pip3 install -r requirements.txt
      python3 setup.py install
    args:
      warn: no      
      executable: /bin/bash


  - name: Generate a sample configuration file
    shell: |
      cd /var/lib/zun/zun
      su -s /bin/sh -c "oslo-config-generator --config-file etc/zun/zun-config-generator.conf" zun 
      su -s /bin/sh -c "cp etc/zun/zun.conf.sample /etc/zun/zun.conf" zun
      su -s /bin/sh -c "cp etc/zun/rootwrap.conf /etc/zun/rootwrap.conf" zun
      su -s /bin/sh -c "mkdir -p /etc/zun/rootwrap.d" zun
      su -s /bin/sh -c "cp etc/zun/rootwrap.d/* /etc/zun/rootwrap.d/" zun
    args:
      warn: no        
  
  - name: Configure sudoers for zun users
    shell: |
      echo "zun ALL=(root) NOPASSWD: /usr/local/bin/zun-rootwrap /etc/zun/rootwrap.conf *" | sudo tee /etc/sudoers.d/zun-rootwrap
    args:
      warn: no   
      executable: /bin/bash

  - name: Edit the /etc/zun/zun.conf file 
    template:
      src: zun.conf.j2
      dest: /etc/zun/zun.conf
      owner: root 
      group: zun
      mode: '0640'

  - name: Delete docker.service.d directory 
    file:
      path: /etc/systemd/system/docker.service.d
      state: absent
      mode: '0755'

  - name: Create docker.service.d directory if it does not exist
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
      mode: '0755'

  - name: Create the file /usr/lib/systemd/system/docker.service
    template:
      src: docker.service.j2
      dest: /usr/lib/systemd/system/docker.service
      owner: root 
      group: root
      mode: '0644'   
      
  - name: Configure containerd 
    template:
      src: config.toml.j2
      dest: /etc/containerd/config.toml
      owner: zun 
      group: zun
      mode: '0640'

  - name: Configure containerd 
    shell: |
      #containerd config default > /etc/containerd/config.toml
      chown zun:zun /etc/containerd/config.toml
      gid=$(getent group zun | awk -F ':' '{print $3}')
      sed -i "s|#ZUM_GID#|${gid}|g" /etc/containerd/config.toml
    args:
      executable: /bin/bash 
      warn: no   
      
  - name: Restart containerd
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
      daemon_reload: yes
    with_items:
      - containerd
  
  - name: Configure CNI
    shell: | 
      mkdir -p /opt/cni/bin
      curl -L https://github.com/containernetworking/plugins/releases/download/v0.7.1/cni-plugins-amd64-v0.7.1.tgz | tar -C /opt/cni/bin -xzvf - ./loopback
      install -o zun -m 0555 -D /usr/local/bin/zun-cni /opt/cni/bin/zun-cni
    args:
      warn: no
      executable: /bin/bash
  
  - name: Create /etc/systemd/system/zun-compute.service
    template:
      src: zun-compute.service.j2
      dest: /etc/systemd/system/zun-compute.service
      owner: root 
      group: root
      mode: '0640'  

  - name: Create /etc/systemd/system/zun-cni-daemon.service
    template:
      src: zun-cni-daemon.service.j2
      dest: /etc/systemd/system/zun-cni-daemon.service
      owner: root 
      group: root
      mode: '0640'        
  
  - name: Enable and start zun-compute
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
      daemon_reload: yes
    with_items:      
      - kuryr-libnetwork
      - docker      

  - name: Enable and start zun-compute
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
      daemon_reload: yes
    with_items:
      - zun-compute
      - zun-cni-daemon      
      
    
      
      




    


